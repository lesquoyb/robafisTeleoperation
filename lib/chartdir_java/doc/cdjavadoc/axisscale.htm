<HTML>
<HEAD>
<Title>Y-Axis Scaling</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.0 (Java Edition)</p>
<p class="heading1">Y-Axis Scaling</p>
<hr class="separator">
<div class="content">
<img src="images/axisscale0.png">&nbsp;&nbsp;<img src="images/axisscale1.png">&nbsp;&nbsp;<img src="images/axisscale2.png">&nbsp;&nbsp;<img src="images/axisscale3.png">&nbsp;&nbsp;<img src="images/axisscale4.png">
<br><br>
This example demonstrates how to control auto-scaling.<br><br>
By default, ChartDirector auto-scales all axes. The <a href="Axis.setAutoScale.htm">Axis.setAutoScale</a> method controls the top extension, bottom extension and the zero affinity parameters that ChartDirector uses during auto-scaling. The first two parameters determine the amount of top and bottom margins to reserve during auto-scaling, while the last parameter determines when the axis should start from the origin (0).<br><br>
The first 3 charts demonstrate the effects of different top/bottom extensions.<br><br>
The 4th chart demonstrates that one could exclude a segment on the ends of an axis from scaling using <a href="Axis.setMargin.htm">Axis.setMargin</a>.<br><br>
The 5th chart demonstrates manual scaling instead of auto-scaling. In manual scaling, the axis scale is explicitly provided by using <a href="Axis.setLinearScale.htm">Axis.setLinearScale</a>, <a href="Axis.setLinearScale2.htm">Axis.setLinearScale2</a>, <a href="Axis.setLogScale.htm">Axis.setLogScale</a>, <a href="Axis.setLogScale2.htm">Axis.setLogScale2</a>, <a href="Axis.setDateScale.htm">Axis.setDateScale</a> or <a href="Axis.setDateScale2.htm">Axis.setDateScale2</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[JSP Version]</b> jspdemo/axisscale.jsp
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;%@page import="ChartDirector.*" %&gt;
&lt;%@page import="javax.servlet.http.*" %&gt;
&lt;%!
// A simple structure to represent a chart image with an image map
private static class ImageWithHotSpot
{
    String imageURL;
    String imageMap;
}

// Function to create the demo charts
ImageWithHotSpot createChart(HttpServletRequest request, int chartIndex)
{
    // The data for the chart
    double[] data = {5.5, 3.5, -3.7, 1.7, -1.4, 3.3};
    String[] labels = {"Jan", "Feb", "Mar", "Apr", "May", "Jun"};

    // Create a XYChart object of size 200 x 190 pixels
    XYChart c = new XYChart(200, 190);

    // Set the plot area at (30, 20) and of size 140 x 140 pixels
    c.setPlotArea(30, 20, 140, 140);

    // Configure the axis as according to the input parameter
    if (chartIndex == 0) {
        c.addTitle("No Axis Extension", "Arial", 8);
    } else if (chartIndex == 1) {
        c.addTitle("Top/Bottom Extensions = 0/0", "Arial", 8);
        // Reserve 20% margin at top of plot area when auto-scaling
        c.yAxis().setAutoScale(0, 0);
    } else if (chartIndex == 2) {
        c.addTitle("Top/Bottom Extensions = 0.2/0.2", "Arial", 8);
        // Reserve 20% margin at top and bottom of plot area when auto-scaling
        c.yAxis().setAutoScale(0.2, 0.2);
    } else if (chartIndex == 3) {
        c.addTitle("Axis Top Margin = 15", "Arial", 8);
        // Reserve 15 pixels at top of plot area
        c.yAxis().setMargin(15);
    } else {
        c.addTitle("Manual Scale -5 to 10", "Arial", 8);
        // Set the y axis to scale from -5 to 10, with ticks every 5 units
        c.yAxis().setLinearScale(-5, 10, 5);
    }

    // Set the labels on the x axis
    c.xAxis().setLabels(labels);

    // Add a color bar layer using the given data. Use a 1 pixel 3D border for the bars.
    c.addBarLayer3(data).setBorderColor(-1, 1);

    // Output the chart
    ImageWithHotSpot ret = new ImageWithHotSpot();
    ret.imageURL = c.makeSession(request, "chart" + chartIndex);

    // Include tool tip for the chart
    ret.imageMap = c.getHTMLImageMap("", "", "title='ROI for {xLabel}: {value}%'");

    return ret;
}
%&gt;
&lt;%
ImageWithHotSpot chart0 = createChart(request, 0);
ImageWithHotSpot chart1 = createChart(request, 1);
ImageWithHotSpot chart2 = createChart(request, 2);
ImageWithHotSpot chart3 = createChart(request, 3);
ImageWithHotSpot chart4 = createChart(request, 4);
%&gt;
&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Y-Axis Scaling
&lt;/div&gt;
&lt;hr color="#000080"&gt;
&lt;div style="font-size:10pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;a href="viewsource.jsp?file=&lt;%=request.getServletPath()%&gt;"&gt;View Source Code&lt;/a&gt;
&lt;/div&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart0.imageURL)%&gt;'
    usemap="#map0" border="0"&gt;
&lt;map name="map0"&gt;&lt;%=chart0.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart1.imageURL)%&gt;'
    usemap="#map1" border="0"&gt;
&lt;map name="map1"&gt;&lt;%=chart1.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart2.imageURL)%&gt;'
    usemap="#map2" border="0"&gt;
&lt;map name="map2"&gt;&lt;%=chart2.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart3.imageURL)%&gt;'
    usemap="#map3" border="0"&gt;
&lt;map name="map3"&gt;&lt;%=chart3.imageMap%&gt;&lt;/map&gt;
&lt;img src='&lt;%=response.encodeURL("getchart.jsp?"+chart4.imageURL)%&gt;'
    usemap="#map4" border="0"&gt;
&lt;map name="map4"&gt;&lt;%=chart4.imageMap%&gt;&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></table><br><b>[Java Version]</b> javademo/axisscale.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import ChartDirector.*;

public class axisscale implements DemoModule
{
    //Name of demo program
    public String toString() { return "Y-Axis Scaling"; }

    //Number of charts produced in this demo
    public int getNoOfCharts() { return 5; }

    //Main code for creating charts
    public void createChart(ChartViewer viewer, int chartIndex)
    {
        // The data for the chart
        double[] data = {5.5, 3.5, -3.7, 1.7, -1.4, 3.3};
        String[] labels = {"Jan", "Feb", "Mar", "Apr", "May", "Jun"};

        // Create a XYChart object of size 200 x 190 pixels
        XYChart c = new XYChart(200, 190);

        // Set the plot area at (30, 20) and of size 140 x 140 pixels
        c.setPlotArea(30, 20, 140, 140);

        // Configure the axis as according to the input parameter
        if (chartIndex == 0) {
            c.addTitle("No Axis Extension", "Arial", 8);
        } else if (chartIndex == 1) {
            c.addTitle("Top/Bottom Extensions = 0/0", "Arial", 8);
            // Reserve 20% margin at top of plot area when auto-scaling
            c.yAxis().setAutoScale(0, 0);
        } else if (chartIndex == 2) {
            c.addTitle("Top/Bottom Extensions = 0.2/0.2", "Arial", 8);
            // Reserve 20% margin at top and bottom of plot area when auto-scaling
            c.yAxis().setAutoScale(0.2, 0.2);
        } else if (chartIndex == 3) {
            c.addTitle("Axis Top Margin = 15", "Arial", 8);
            // Reserve 15 pixels at top of plot area
            c.yAxis().setMargin(15);
        } else {
            c.addTitle("Manual Scale -5 to 10", "Arial", 8);
            // Set the y axis to scale from -5 to 10, with ticks every 5 units
            c.yAxis().setLinearScale(-5, 10, 5);
        }

        // Set the labels on the x axis
        c.xAxis().setLabels(labels);

        // Add a color bar layer using the given data. Use a 1 pixel 3D border for the bars.
        c.addBarLayer3(data).setBorderColor(-1, 1);

        // Output the chart
        viewer.setChart(c);

        //include tool tip for the chart
        viewer.setImageMap(c.getHTMLImageMap("clickable", "", "title='ROI for {xLabel}: {value}%'"))
            ;
    }

    //Allow this module to run as standalone program for easy testing
    public static void main(String[] args)
    {
        //Instantiate an instance of this demo module
        DemoModule demo = new axisscale();

        //Create and set up the main window
        JFrame frame = new JFrame(demo.toString());
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);} });
        frame.getContentPane().setBackground(Color.white);
        frame.getContentPane().setLayout(new FlowLayout(FlowLayout.LEFT));
        frame.setSize(800, 450);

        // Create the charts and put them in the content pane
        for (int i = 0; i &lt; demo.getNoOfCharts(); ++i)
        {
            ChartViewer viewer = new ChartViewer();
            demo.createChart(viewer, i);
            frame.getContentPane().add(viewer);
        }

        // Display the window
        frame.setVisible(true);
    }
}</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
