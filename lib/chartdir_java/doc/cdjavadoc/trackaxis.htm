<HTML>
<HEAD>
<Title>Track Line with Axis Labels (Windows)</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">
<p class="heading0">ChartDirector 6.0 (Java Edition)</p>
<p class="heading1">Track Line with Axis Labels (Windows)</p>
<hr class="separator">
<div class="content"><img src="images/trackaxis_java.png"><br><br>
<div style="background-color:#cccccc;width:99%;padding:10px">
<b><font color="#FF0000">NOTE:</font></b> This section describes Track Line with Axis Labels for Windows applications only. For web applications, please refer to <a href="trackaxisweb.htm">Track Line with Axis Labels (Web)</a>.
</div><br>
This sample program demonstrates a track cursor programmed with the following features:<br><br>
<ul>
<li>Small dots that shows the data points at the nearest x data value from the mouse cursor.<br><br>
<li>A vertical line that connects the data points to the x-axis, with an x-axis label displaying the x value.<br><br>
<li>Horizontal lines that connect the data points to the y-axes, with y-axis labels displaying their values.<br><br>
</ul>
The code first draws the chart. Then in the      <a href="TrackCursorListener.mouseMovedPlotArea.htm">TrackCursorListener.mouseMovedPlotArea</a> event    handler, the track cursor is drawn to reflect the mouse position. The track cursor is configured to automatically hide itself when the mouse leaves the plot area.<br><br>
The <b>trackLineAxis</b> method is the routine that draws the track cursor. Its key elements are:<br><br>
<ul>
<li>To draw dynamic contents on the chart, the code obtains the <a href="DrawArea.htm">DrawArea</a> object for drawing on the dynamic layer of the chart using <a href="BaseChart.initDynamicLayer.htm">BaseChart.initDynamicLayer</a>.<br><br>
<li>The nearest x data value is obtained using <a href="XYChart.getNearestXValue.htm">XYChart.getNearestXValue</a>.<br><br>
<li>The code iterates through all data sets in all layers to find the highest data point at the nearest x data value. It then draws a vertical line from that point to the x-axis using <a href="DrawArea.vline.htm">DrawArea.vline</a>, and the corresponding x-axis label using <a href="DrawArea.text.htm">DrawArea.text</a>.<br><br>
<li>The code iterates through all data sets in all layers once more to find all the data points at the nearest x data value. For each of these points, it draws a horizontal line to connect the point to the y-axis using <a href="DrawArea.hline.htm">DrawArea.hline</a>, draws the axis label using <a href="DrawArea.text.htm">DrawArea.text</a>, and draws a circular dot at the point using <a href="DrawArea.circle.htm">DrawArea.circle</a>.<br><br>
</ul>
</div><p class="heading1a">Source Code Listing</p><div class="content">
<b>[Java Version]</b> javademo/trackaxis.java
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>import ChartDirector.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;

public class trackaxis implements DemoModule
{
    //
    // The main method to allow this demo to run as a standalone program.
    //
    public static void main(String args[]) 
    {
        trackaxis demo = new trackaxis();
        demo.display();
        System.exit(0);
    }

    //
    // Display the window
    //
    private void display() 
    {   
        // Use a JDialog as the window
           JDialog d = new JDialog((java.awt.Frame)null, toString(), true);
        d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        d.setResizable(false);     
   
        // Create the ChartViewer and add it to the JDialog
        ChartViewer viewer = new ChartViewer();
        d.getContentPane().add(viewer);

        // Add a movedMovedPlotArea event listener to draw the track cursor
        viewer.addTrackCursorListener(new TrackCursorAdapter() {
            public void mouseMovedPlotArea(MouseEvent e) {
                chartViewer1_MouseMovedPlotArea(e);
            }
        });
        
        // Draw the chart
        drawChart(viewer);

        // Layout and display the JDialog
        d.pack();
        d.setVisible(true);
    }
  
    //
    // Main code for creating charts
    //
    public void drawChart(ChartViewer viewer)
    {
        // Data for the chart as 2 random data series
        RanSeries r = new RanSeries(127);
        double[] data0 = r.getSeries(180, 10, -1.5, 1.5);
        double[] data1 = r.getSeries(180, 150, -15, 15);
        Date[] timeStamps = r.getDateSeries(180, new GregorianCalendar(2011, 0, 1).getTime(), 86400);

        // Create a XYChart object of size 670 x 400 pixels
        XYChart c = new XYChart(670, 400);

        // Add a title to the chart using 18pt Times New Roman Bold Italic font
        c.addTitle("Plasma Stabilizer Energy Usage", "Times New Roman Bold Italic", 18);

        // Set the plotarea at (50, 55) with width 100 pixels less than chart width, and height 90 pixels less
        // than chart height. Use a vertical gradient from light blue (f0f6ff) to sky blue (a0c0ff) as
        // background. Set border to transparent and grid lines to white (ffffff).
        c.setPlotArea(50, 55, c.getWidth() - 100, c.getHeight() - 90, c.linearGradientColor(0, 55, 0,
            c.getHeight() - 35, 0xf0f6ff, 0xa0c0ff), -1, Chart.Transparent, 0xffffff, 0xffffff);

        // Add a legend box at (50, 25) using horizontal layout. Use 10pt Arial Bold as font. Set the
        // background and border color to Transparent.
        c.addLegend(50, 25, false, "Arial Bold", 10).setBackground(Chart.Transparent);

        // Set axis label style to 8pt Arial Bold
        c.xAxis().setLabelStyle("Arial Bold", 8);
        c.yAxis().setLabelStyle("Arial Bold", 8);
        c.yAxis2().setLabelStyle("Arial Bold", 8);

        // Set the axis stem to transparent
        c.xAxis().setColors(Chart.Transparent);
        c.yAxis().setColors(Chart.Transparent);
        c.yAxis2().setColors(Chart.Transparent);

        // Configure x-axis label format
        c.xAxis().setMultiFormat(Chart.StartOfYearFilter(), "{value|mm/yyyy} ", Chart.StartOfMonthFilter(),
            "{value|mm}");

        // Add axis title using 10pt Arial Bold Italic font
        c.yAxis().setTitle("Power Usage (Watt)", "Arial Bold Italic", 10);
        c.yAxis2().setTitle("Effective Load (kg)", "Arial Bold Italic", 10);

        // Add a line layer to the chart using a line width of 2 pixels.
        LineLayer layer = c.addLineLayer2();
        layer.setLineWidth(2);

        // Add 2 data series to the line layer
        layer.setXData(timeStamps);
        layer.addDataSet(data0, 0xcc0000, "Power Usage");
        layer.addDataSet(data1, 0x008800, "Effective Load").setUseYAxis2();

        // Assign the chart to the ChartViewer
        viewer.setChart(c);
    }

    //
    // Draw track cursor when mouse is moving over plotarea
    //
    private void chartViewer1_MouseMovedPlotArea(MouseEvent e)
    {
        ChartViewer viewer = (ChartViewer)e.getSource();
        trackLineAxis((XYChart)viewer.getChart(), viewer.getPlotAreaMouseX());
        viewer.updateDisplay();

        // Hide the track cursor when the mouse leaves the plot area
        viewer.removeDynamicLayer("MouseExitedPlotArea");
    }

    //
    // Draw track line with axis labels
    //
    private void trackLineAxis(XYChart c, int mouseX)
    {
        // Clear the current dynamic layer and get the DrawArea object to draw on it.
        DrawArea d = c.initDynamicLayer();

        // The plot area object
        PlotArea plotArea = c.getPlotArea();

        // Get the data x-value that is nearest to the mouse, and find its pixel coordinate.
        double xValue = c.getNearestXValue(mouseX);
        int xCoor = c.getXCoor(xValue);

        // The vertical track line is drawn up to the highest data point (the point with smallest
        // y-coordinate). We need to iterate all datasets in all layers to determine where it is.
        int minY = plotArea.getBottomY();

        // Iterate through all layers to find the highest data point
        for (int i = 0; i &lt; c.getLayerCount(); ++i) {
            Layer layer = c.getLayerByZ(i);

            // The data array index of the x-value
            int xIndex = layer.getXIndexOf(xValue);

            // Iterate through all the data sets in the layer
            for (int j = 0; j &lt; layer.getDataSetCount(); ++j) {
                ChartDirector.DataSet dataSet = layer.getDataSetByZ(j);

                double dataPoint = dataSet.getPosition(xIndex);
                if ((dataPoint != Chart.NoValue) &amp;&amp; (dataSet.getDataColor() != Chart.Transparent)) {
                    minY = Math.min(minY, c.getYCoor(dataPoint, dataSet.getUseYAxis()));
                }
            }
        }

        // Draw a vertical track line at the x-position up to the highest data point.
        d.vline(Math.max(minY, plotArea.getTopY()), plotArea.getBottomY() + 6, xCoor, d.dashLineColor(
            0x000000, 0x0101));

        // Draw a label on the x-axis to show the track line position
        d.text("&lt;*font,bgColor=000000*&gt; " + c.xAxis().getFormattedLabel(xValue, "mmm dd, yyyy") +
            " &lt;*/font*&gt;", "Arial Bold", 8).draw(xCoor, plotArea.getBottomY() + 6, 0xffffff, Chart.Top);

        // Iterate through all layers to build the legend array
        for (int i = 0; i &lt; c.getLayerCount(); ++i) {
            Layer layer = c.getLayerByZ(i);

            // The data array index of the x-value
            int xIndex = layer.getXIndexOf(xValue);

            // Iterate through all the data sets in the layer
            for (int j = 0; j &lt; layer.getDataSetCount(); ++j) {
                ChartDirector.DataSet dataSet = layer.getDataSetByZ(j);

                // The positional value, axis binding, pixel coordinate and color of the data point.
                double dataPoint = dataSet.getPosition(xIndex);
                Axis yAxis = dataSet.getUseYAxis();
                int yCoor = c.getYCoor(dataPoint, yAxis);
                int color = dataSet.getDataColor();

                // Draw the axis label only for visible data points of named data sets
                if ((dataPoint != Chart.NoValue) &amp;&amp; (color != Chart.Transparent) &amp;&amp; (yCoor &gt;=
                    plotArea.getTopY()) &amp;&amp; (yCoor &lt;= plotArea.getBottomY())) {
                    // The axis label consists of 3 parts - a track dot for the data point, an axis label, and
                    // a line joining the track dot to the axis label.

                    // Draw the line first. The end point of the line at the axis label side depends on
                    // whether the label is at the left or right side of the axis (that is, on whether the
                    // axis is on the left or right side of the plot area).
                    int xPos = yAxis.getX() + ((yAxis.getAlignment() == Chart.Left) ? -4 : 4);
                    d.hline(xCoor, xPos, yCoor, d.dashLineColor(color, 0x0101));

                    // Draw the track dot
                    d.circle(xCoor, yCoor, 4, 4, color, color);

                    // Draw the axis label. If the axis is on the left side of the plot area, the labels
                    // should right aligned to the axis, and vice versa.
                    d.text("&lt;*font,bgColor=" + Integer.toHexString(color) + "*&gt; " + c.formatValue(dataPoint,
                        "{value|P4}") + " &lt;*/font*&gt;", "Arial Bold", 8).draw(xPos, yCoor, 0xffffff, ((
                        yAxis.getAlignment() == Chart.Left) ? Chart.Right : Chart.Left));
                }
            }
        }
    }
    
    //
    // Implementation of the DemoModule interface to allow this demo to run inside the 
    // ChartDirectorDemo browser
    //
    
    // Name of demo program
    public String toString() 
    { 
        return "Track Line with Axis Labels"; 
    }

    // Number of charts produced in this demo
    public int getNoOfCharts() 
    { 
        // This demo open its own dialog instead of using the right pane of the ChartDirectorDemo 
        // for display. We just display the dialog, then return 0.
        display();
        return 0; 
    }

    // Main code for creating charts
    public void createChart(ChartViewer viewer, int chartIndex)
    {
        // do nothing, as the ChartDirectorDemo browser right pane is not used
    }
}</pre></td></tr></table></div><br>
<hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div></body>
</HTML>
