<HTML>
<HEAD>
<Title>Zooming and Scrolling Framework (Windows)</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">
<p class="heading0">ChartDirector 6.0 (Java Edition)</p>
<p class="heading1">Zooming and Scrolling Framework (Windows)</p>
<hr class="separator">
<div class="content"><div style="background-color:#cccccc;width:99%;padding:10px">
<b><font color="#FF0000">NOTE:</font></b> This section describes Zooming and Scrolling Framework for Windows applications only. For web applications, please refer to <a href="zoomscrollintroweb.htm">Zooming and Scrolling Framework (Web)</a>.
</div><br>
</div><p class="heading1a">Introduction</p><div class="content">
The ChartDirector Zooming and Scrolling Framework is a framework for "logical zooming" of charts. "Logical zooming" means the chart is plotted with more details as it is zoomed in, but the chart objects do not necessary become bigger. The font size, line width, symbol size, etc, may remain the same. The chart may change type or use different data when it is zoomed in. For example, for a finance chart, it may start as a daily candlestick chart when the time range is long, and becomes a realtime intraday line chart when zoomed to one day.<br><br>
The main elements of the ChartDirector Zooming and Scrolling Framework include a click and drag user interface to control zooming and scrolling, and a set of methods to manage axis scales. To implement a zoomable and scrollable chart, the charting code would need to be written to create the required chart type based on the axis scales.
</div><p class="heading1a">The View Port</p><div class="content">
In the ChartDirector Zooming and Scrolling framework, the view port is used to determine which part of the data range should be plotted.<br><br>
The view port can be imagined as a rectangular window over the entire XY data range. For example, suppose the full data range is 10 years in the horizontal direction. A view port width of 0.1 means only 10% of the horizontal data range should be plotted. In other words, the chart is zoomed in so that only 1 year of data is visible. The view port left side will determine exactly which year of data that is visible.<br><br>
The view port position and size can be get and set using the following methods. The full data range is always assumed to be 0 to 1. So the view port position and size should be between 0 to 1.<br><br>
<table width="98%" border="1" cellpadding="5" cellspacing="0"> <tr><th width="33%">Method<th width="65%">Description
<tr><td><a href="ChartViewer.getViewPortLeft.htm">ChartViewer.getViewPortLeft</a><td>Gets the position of the left side of the view port. <tr><td><a href="ChartViewer.setViewPortLeft.htm">ChartViewer.setViewPortLeft</a><td>Sets the position of the left side of the view port. <tr><td><a href="ChartViewer.getViewPortTop.htm">ChartViewer.getViewPortTop</a><td>Gets the position of the top side of the view port. <tr><td><a href="ChartViewer.setViewPortTop.htm">ChartViewer.setViewPortTop</a><td>Sets the position of the top side of the view port. <tr><td><a href="ChartViewer.getViewPortWidth.htm">ChartViewer.getViewPortWidth</a><td>Gets the width of the view port. <tr><td><a href="ChartViewer.setViewPortWidth.htm">ChartViewer.setViewPortWidth</a><td>Sets the width of the view port. <tr><td><a href="ChartViewer.getViewPortHeight.htm">ChartViewer.getViewPortHeight</a><td>Gets the height of the view port. <tr><td><a href="ChartViewer.setViewPortHeight.htm">ChartViewer.setViewPortHeight</a><td>Sets the height of the view port.
</table><br>
</div><p class="heading1a">The Zoom and Scroll User Interface</p><div class="content">
The <a href="ChartViewer.htm">ChartViewer</a> control allows using mouse actions on the chart to control zooming and scrolling. Several mouse usage modes are supported, including drag to scroll, drag to select a region to zoom into, click to zoom in, click to zoom out. They can be selected using <a href="ChartViewer.setMouseUsage.htm">ChartViewer.setMouseUsage</a>. The ChartViewer also supports using mouse wheel to control zooming, configurable using <a href="ChartViewer.setMouseWheelZoomRatio.htm">ChartViewer.setMouseWheelZoomRatio</a>. The zooming and scrolling direction can be horizontal only, vertical only, or both, configurable using <a href="ChartViewer.setZoomDirection.htm">ChartViewer.setZoomDirection</a> and <a href="ChartViewer.setScrollDirection.htm">ChartViewer.setScrollDirection</a>.<br><br>
When the user performs zooming or scrolling operations, <a href="ChartViewer.htm">ChartViewer</a> will update the view port to reflect the new visible region. It will then fire the      <a href="ViewPortListener.viewPortChanged.htm">ViewPortListener.viewPortChanged</a> event    . The event handler can then redraw the chart.
</div><p class="heading1a">The ViewPortControl</p><div class="content">
In addition to using mouse actions directly on the chart being zoomed or scrolled, ChartDirector also provides a <a href="ViewPortControl.htm">ViewPortControl</a> to let the user visualize and manipulate the view port managed by the <a href="ChartViewer.htm">ChartViewer</a>.<br><br>
In typical usage, the ViewPortControl displays an "overall chart" that shows the full data range, configured using <a href="ViewPortControl.setChart.htm">ViewPortControl.setChart</a>, and connects to the ChartViewer using <a href="ViewPortControl.setViewer.htm">ViewPortControl.setViewer</a>. The ViewPortControl can then include a rectangle on the overall chart to representing the view port. The user can drag the rectangle to move the view port, which corresponds to scrolling. The user can also drag the rectangle border to resize the view port, which corresponds to zooming. In additional, the user can drag a new rectangular region as the new view port or click on a point on the overall chart to center the view port at that point. These user interactions can be configured with the methods of the <a href="ViewPortControl.htm">ViewPortControl</a>.
</div><p class="heading1a">Zoom and Scroll with External Controls</p><div class="content">
In some applications, it may be desirable to have other ways to control zooming and scrolling. For example, in finance charts, there are often buttons that allow the user to jump to certain predefined period (eg. the last 30, 90, 180 or 360 days), which are essentially a type of zooming and scrolling. Sometimes people would like to use scroll bars to control scrolling, or to use "date picker controls" to directly select the data range to display.<br><br>
To perform zooming and scrolling using external controls, the controls can update the view port and then fire ViewPortChanged events by using <a href="ChartViewer.updateViewPort.htm">ChartViewer.updateViewPort</a>. For example, if a scroll bar is used for scrolling, in event handler of the scroll bar, it may update the view port to reflect the current scroll bar position, and then call <a href="ChartViewer.updateViewPort.htm">ChartViewer.updateViewPort</a>.
</div><p class="heading1a">The ViewPortChanged Event</p><div class="content">
The      <a href="ViewPortListener.viewPortChanged.htm">ViewPortListener.viewPortChanged</a> event     occurs when the view port is changed. In the simplest case, the event handler just needs to call the charting code to redraw the chart to reflect the changed view port.<br><br>
If external controls are used, they may need to be updated to reflect the view port. For example, suppose the user can drag the chart or drag a scroll bar to scroll the chart. If the user drags the chart, the scroll bar would need to be updated too to reflect the new view port position.<br><br>
In zooming and scrolling, the view port events can be "intermediate events". For example, in "drag to scroll", as the user drags the mouse, the view port will be updated rapidly and generate a lot of ViewPortChanged events. These events are "intermediate events" because the view port is still changing. When the user finishes dragging and releases the mouse, ChartDirector will fire a ViewPortChanged event. Only this "final event" corresponds to a stable view port.<br><br>
To efficiently handle intermediate events, the ViewPortChanged event handler is called with two boolean flags - needUpdateChart and needUpdateImageMap -  to determine if the chart and/or image map needs to be updated. For intermediate events, ChartDirector will indicate only the chart needs update. For the final event, ChartDirector will indicate that the image map needs update. It may indicate the chart needs update if the view port has changed between the last intermediate event and the final event.<br><br>
If external controls are used to control zooming and scrolling and the chart requires image map, it is suggested the external controls set the needUpdateChart and needUpdateImageMap flags properly when calling <a href="ChartViewer.updateViewPort.htm">ChartViewer.updateViewPort</a>. However, for some controls, it may be impossible to distinguish between intermediate and final events. One way to handle this case is to delay updating the image map until the mouse moves over the chart. It is because the image map is for configuring hot spots on the chart, so it is not needed until the mouse is over the chart.
</div><p class="heading1a">Managing Axis Scale</p><div class="content">
The view port always assumes the full data range to be 0 to 1. In practice, a chart can have multiple x-axes and y-axes, using a combination of date/time, linear and logarithmic scales.<br><br>
To facilitate conversion between the view port and the axis scale, ChartDirector includes a number of methods as follows:<br><br>
<table width="98%" border="1" cellpadding="5" cellspacing="0"> <tr><th width="33%">Method<th width="65%">Description
<tr><td><a href="ChartViewer.setFullRange.htm">ChartViewer.setFullRange</a><td>Defines the full range of a view port data scale. <tr><td><a href="ChartViewer.updateFullRangeH.htm">ChartViewer.updateFullRangeH</a><td>Updates a horizontal the full range and adjust the view port accordingly. <tr><td><a href="ChartViewer.updateFullRangeV.htm">ChartViewer.updateFullRangeV</a><td>Updates a vertical the full range and adjust the view port accordingly. <tr><td><a href="ChartViewer.getValueAtViewPort.htm">ChartViewer.getValueAtViewPort</a><td>Converts a view port coordinate to a value of the specified data scale. <tr><td><a href="ChartViewer.getViewPortAtValue.htm">ChartViewer.getViewPortAtValue</a><td>Converts a value of the specified data scale to a view port coordinate. <tr><td><a href="ChartViewer.syncLinearAxisWithViewPort.htm">ChartViewer.syncLinearAxisWithViewPort</a><td>Synchronizes a linear Axis with the part of the data scale in view port. <tr><td><a href="ChartViewer.syncLogAxisWithViewPort.htm">ChartViewer.syncLogAxisWithViewPort</a><td>Synchronizes a logarithmic Axis with the part of the data scale in view port. <tr><td><a href="ChartViewer.syncDateAxisWithViewPort.htm">ChartViewer.syncDateAxisWithViewPort</a><td>Synchronizes a date/time Axis with the part of the data scale in view port.
</table><br>
In typical usage, <a href="ChartViewer.setFullRange.htm">ChartViewer.setFullRange</a> is used to define the full data ranges for the axes in the chart. <a href="ChartViewer.getValueAtViewPort.htm">ChartViewer.getValueAtViewPort</a> and <a href="ChartViewer.getViewPortAtValue.htm">ChartViewer.getViewPortAtValue</a> can then be used to map between data values and view port positions. <a href="ChartViewer.syncLinearAxisWithViewPort.htm">ChartViewer.syncLinearAxisWithViewPort</a>, <a href="ChartViewer.syncLogAxisWithViewPort.htm">ChartViewer.syncLogAxisWithViewPort</a> and <a href="ChartViewer.syncDateAxisWithViewPort.htm">ChartViewer.syncDateAxisWithViewPort</a> can be used to synchronize the axis scale with the view port position.<br><br>
If <a href="ChartViewer.syncLinearAxisWithViewPort.htm">ChartViewer.syncLinearAxisWithViewPort</a>, <a href="ChartViewer.syncLogAxisWithViewPort.htm">ChartViewer.syncLogAxisWithViewPort</a> or <a href="ChartViewer.syncDateAxisWithViewPort.htm">ChartViewer.syncDateAxisWithViewPort</a> is called without first defining the full data range, ChartDirector will automatically configure the axis scale based on the data in the chart, and assume it to be the full data range. This is useful if the full data range is not known but must be inferred from the data.<br><br>
For realtime charts, new data can be added and old data can be removed. That means the full range can change. In this case, the <a href="ChartViewer.updateFullRangeH.htm">ChartViewer.updateFullRangeH</a> and <a href="ChartViewer.updateFullRangeV.htm">ChartViewer.updateFullRangeV</a> can be used to update the full range and adjust the view port to fit into the updated full range.
</div><p class="heading1a">Zooming and Scrolling Examples</p><div class="content">
<table width="98%" border="1" cellpadding="5" cellspacing="0"> <tr><th width="33%">Sample Code<th width="65%">Description
<tr><td><a href="simplezoomscroll.htm">Simple Zooming and Scrolling (Windows)</a><td>A simple zoomable and scrollable chart with tooltips, using mouse click and drag to control zooming and scrolling.
<tr><td><a href="zoomscrolltrack.htm">Zooming and Scrolling with Track Line (1) (Windows)</a><td>In addition to using mouse click and drag, this example demonstrates using a scroll bar for scrolling, and mouse wheel for zooming. It also includes a track cursor that updates the legend dynamically to display the data values as the mouse cursor moves over the chart.
<tr><td><a href="zoomscrolltrack2.htm">Zooming and Scrolling with Track Line (2) (Windows)</a><td>This example extends <a href="zoomscrolltrack.htm">Zooming and Scrolling with Track Line (1) (Windows)</a> by adding two date picker controls. The user can use them to change the start and end dates of the chart. Conversely, if the start and end dates of the chart are changed by other means (such as using mouse drag to scroll/zoom, mouse wheel or using the scroll bar), the date picker controls will be updated.
<tr><td><a href="viewportcontroldemo.htm">Zooming and Scrolling with Viewport Control (Windows)</a><td>The example extends the <a href="zoomscrolltrack.htm">Zooming and Scrolling with Track Line (1) (Windows)</a> example by replacing the scrollbar with a <a href="ViewPortControl.htm">ViewPortControl</a>. There is also a save button to save the chart in PNG, JPG, GIF, BMP, SVG or PDF formats.
<tr><td><a href="xyzoomscroll.htm">XY Zooming and Scrolling (Windows)</a><td>This example demonstrates zooming and scrolling in both horizontal and vertical directions. In addition to using mouse click and drag, this example demonstrates using a slider and a <a href="ViewPortControl.htm">ViewPortControl</a> to control zooming and scrolling. This example also includes a crosshair track cursor with dynamic labels on the x-axis and y-axis showing the mouse cursor position, and an image map for data point tooltips.
<tr><td><a href="realtimezoomscroll.htm">Realtime Chart with Zooming and Scrolling (Windows)</a><td>This example demonstrates a zoomable and scrolling chart that is also a realtime chart.
</table></div><br>
<hr class="separator"><div class="copyright">&copy; 2015 Advanced Software Engineering Limited. All rights reserved.</div></body>
</HTML>
